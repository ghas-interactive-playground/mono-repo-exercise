# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL Monorepo Analysis"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '19 1 * * 1'

jobs:
  analyze:
    name: Analyze (${{ matrix.directory }})
    runs-on: 'ubuntu-latest' 
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: go
          build-mode: autobuild
        - language: java-kotlin
          build-mode: none # This mode only analyzes Java. Set this to 'autobuild' or 'manual' to analyze Kotlin too.
        - language: javascript-typescript
          build-mode: none
        - language: python
          build-mode: none
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
   
    steps:

    - name: Fetch Latest Changes (Push)
      if: github.event_name == 'push'
      run: |
          git fetch --depth=2 origin ${{ github.sha }}

    - name: Get changed files (PR)
      if: github.event_name == 'pull_request'
      run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          
          CHANGED_FILES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER/files" | jq -r '.[].filename')

          # Extract unique directories
          CHANGED_DIRS=$(echo "$CHANGED_FILES" | awk -F'/' '{print $1}' | sort -u | tr '\n' ' ')

          echo "Changed Directories: $CHANGED_DIRS"
          echo "CHANGED_DIRS=$CHANGED_DIRS" >> $GITHUB_ENV

    - name: Set matrix
      id: set-matrix
      run: |
          DIRS_JSON=$(echo "${{ steps.changes.outputs.CHANGED_DIRS }}" | tr ' ' '\n' | jq -R . | jq -s .)
          echo "matrix=$DIRS_JSON" >> $GITHUB_OUTPUT

    - name: Checkout code
      uses: actions/checkout@v3
      with:
          sparse-checkout: ${{ matrix.directory }}
          sparse-checkout-cone-mode: false

    - name: Map directory to language
      id: lang-mapping
      run: |
          case "${{ matrix.directory }}" in
            "frontend")
              echo "LANG=javascript" >> $GITHUB_OUTPUT
              ;;
            "auth"|"auth-ext")
              echo "LANG=go,python" >> $GITHUB_OUTPUT
              ;;
            "storage")
              echo "LANG=java" >> $GITHUB_OUTPUT
              ;;
            "gallery")
              echo "LANG=go" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "LANG=" >> $GITHUB_OUTPUT
              ;;
          esac
          
    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ steps.lang-mapping.outputs.LANG }}
        build-mode: none
        if: steps.lang-mapping.outputs.LANG != ''


    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/directory:${{ matrix.directory }}"
        if: steps.lang-mapping.outputs.LANG != ''
